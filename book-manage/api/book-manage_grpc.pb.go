// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookManageClient is the client API for BookManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookManageClient interface {
	QueryBook(ctx context.Context, in *QueryBookRequest, opts ...grpc.CallOption) (*QueryBookResponse, error)
}

type bookManageClient struct {
	cc grpc.ClientConnInterface
}

func NewBookManageClient(cc grpc.ClientConnInterface) BookManageClient {
	return &bookManageClient{cc}
}

func (c *bookManageClient) QueryBook(ctx context.Context, in *QueryBookRequest, opts ...grpc.CallOption) (*QueryBookResponse, error) {
	out := new(QueryBookResponse)
	err := c.cc.Invoke(ctx, "/bookmanage.api.BookManage/QueryBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookManageServer is the server API for BookManage service.
// All implementations must embed UnimplementedBookManageServer
// for forward compatibility
type BookManageServer interface {
	QueryBook(context.Context, *QueryBookRequest) (*QueryBookResponse, error)
	mustEmbedUnimplementedBookManageServer()
}

// UnimplementedBookManageServer must be embedded to have forward compatible implementations.
type UnimplementedBookManageServer struct {
}

func (UnimplementedBookManageServer) QueryBook(context.Context, *QueryBookRequest) (*QueryBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBook not implemented")
}
func (UnimplementedBookManageServer) mustEmbedUnimplementedBookManageServer() {}

// UnsafeBookManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookManageServer will
// result in compilation errors.
type UnsafeBookManageServer interface {
	mustEmbedUnimplementedBookManageServer()
}

func RegisterBookManageServer(s grpc.ServiceRegistrar, srv BookManageServer) {
	s.RegisterService(&BookManage_ServiceDesc, srv)
}

func _BookManage_QueryBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookManageServer).QueryBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmanage.api.BookManage/QueryBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookManageServer).QueryBook(ctx, req.(*QueryBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookManage_ServiceDesc is the grpc.ServiceDesc for BookManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookmanage.api.BookManage",
	HandlerType: (*BookManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryBook",
			Handler:    _BookManage_QueryBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book-manage.proto",
}
